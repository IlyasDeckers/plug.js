(function(){function c(){this.state=a.pending;this.callbacks=[];this.errorArgs=this.successArgs=null}var a={pending:"pending",success:"success",error:"error",completed:"completed"};c.prototype=function(){function d(b,c,e){this.state===b||b===a.completed&&this.state!==a.pending?c.apply(this,e):this.callbacks.push({callback:c,state:b})}function c(b,d){for(var e=0;e<this.callbacks.length;e++){var f=this.callbacks[e];f.state!==b&&f.state!==a.completed||f.callback.apply(this,d)}}return{success:function(b){d.call(this,
a.success,b,this.successArgs);return this},error:function(b){d.call(this,a.error,b,this.errorArgs);return this},then:function(b){d.call(this,a.completed,b,this.successArgs||this.errorArgs);return this},resolve:function(){this.state!==a.pending?console.warn("Promise has already been completed. A promise cannot be resolved or rejected after completion."):(this.state=a.success,this.successArgs=[].slice.call(arguments,0),c.call(this,this.state,this.successArgs))},reject:function(){this.state!==a.pending?
console.warn("Promise has already been completed. A promise cannot be resolved or rejected after completion."):(this.state=a.error,this.errorArgs=[].slice.call(arguments,0),c.call(this,this.state,this.errorArgs))}}}();plug.singleton("promise",[function(){this.defer=function(){return new c}}])})();
